// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Role {
    USER
    ADMIN
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Guestbook {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    name      String
    message   String   @db.VarChar(100)
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    displayName   String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    public        Boolean   @default(false)

    accounts                   Account[]
    sessions                   Session[]
    friendshipRequestsSent     Friendship[]   @relation("FriendRequestsSent")
    friendshipRequestsReceived Friendship[]   @relation("FriendRequestsReceived")
    peopleEvents               PeopleEvents[]
    peopleGroups               PeopleGroups[]

    @@unique([id, name, email, image])
}

model Friendship {
    id                  String                  @id @default(cuid())
    requestSentById     String
    user1               String
    user1Email          String
    user1ProfilePicture String
    requestSentToId     String
    user2               String
    user2Email          String
    user2ProfilePicture String
    status              FriendshipRequestStatus @default(value: PENDING)
    fromId              User?                   @relation("FriendRequestsSent", references: [id, name, email, image], fields: [requestSentById, user1, user1Email, user1ProfilePicture])
    to                  User?                   @relation("FriendRequestsReceived", references: [id, name, email, image], fields: [requestSentToId, user2, user2Email, user2ProfilePicture])
}

model Group {
    id          String   @id @default(cuid())
    title       String
    description String
    image       String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    peopleGroups PeopleGroups[] @relation("group")
    Event        Event[]
}

model PeopleGroups {
    id      String @id @default(cuid())
    groupId String
    groups  Group? @relation("group", fields: [groupId], references: [id])
    userId  String
    user    User   @relation(fields: [userId], references: [id])
    role    Role   @default(USER)

    @@unique([groupId, userId])
}

model Event {
    id           String         @id @default(cuid())
    title        String
    allDay       Boolean
    start        DateTime
    end          DateTime
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    peopleEvents PeopleEvents[] @relation("events")
    Group        Group          @relation(fields: [groupId], references: [id])
    groupId      String

    address     String?
    postcode    String?
    countryCode String?
}

model PeopleEvents {
    id      String @id @default(cuid())
    eventId String
    events  Event? @relation("events", fields: [eventId], references: [id])
    userId  String
    user    User   @relation(fields: [userId], references: [id])

    @@unique([eventId, userId])
}

enum FriendshipRequestStatus {
    PENDING
    ACCEPTED
    REJECTED
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
